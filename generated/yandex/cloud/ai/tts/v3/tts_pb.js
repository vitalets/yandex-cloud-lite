// source: yandex/cloud/ai/tts/v3/tts.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.speechkit.tts.v3.AudioChunk', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.AudioContent', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.AudioContent.AudiosourceCase', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.AudioFormatOptions', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.AudioFormatOptions.AudioformatCase', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.AudioTemplate', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.AudioVariable', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.ContainerAudio', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.ContainerAudio.ContainerAudioType', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.Hints', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.Hints.HintCase', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.RawAudio', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.RawAudio.AudioEncoding', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.TextTemplate', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.TextVariable', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.UtteranceSynthesisRequest', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.UtteranceSynthesisRequest.LoudnessNormalizationType', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.UtteranceSynthesisRequest.UtteranceCase', null, global);
goog.exportSymbol('proto.speechkit.tts.v3.UtteranceSynthesisResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.AudioContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speechkit.tts.v3.AudioContent.oneofGroups_);
};
goog.inherits(proto.speechkit.tts.v3.AudioContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.AudioContent.displayName = 'proto.speechkit.tts.v3.AudioContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.AudioFormatOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speechkit.tts.v3.AudioFormatOptions.oneofGroups_);
};
goog.inherits(proto.speechkit.tts.v3.AudioFormatOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.AudioFormatOptions.displayName = 'proto.speechkit.tts.v3.AudioFormatOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.RawAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechkit.tts.v3.RawAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.RawAudio.displayName = 'proto.speechkit.tts.v3.RawAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.ContainerAudio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechkit.tts.v3.ContainerAudio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.ContainerAudio.displayName = 'proto.speechkit.tts.v3.ContainerAudio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.TextVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechkit.tts.v3.TextVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.TextVariable.displayName = 'proto.speechkit.tts.v3.TextVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.AudioVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechkit.tts.v3.AudioVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.AudioVariable.displayName = 'proto.speechkit.tts.v3.AudioVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechkit.tts.v3.UtteranceSynthesisResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.UtteranceSynthesisResponse.displayName = 'proto.speechkit.tts.v3.UtteranceSynthesisResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.AudioTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechkit.tts.v3.AudioTemplate.repeatedFields_, null);
};
goog.inherits(proto.speechkit.tts.v3.AudioTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.AudioTemplate.displayName = 'proto.speechkit.tts.v3.AudioTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.AudioChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.speechkit.tts.v3.AudioChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.AudioChunk.displayName = 'proto.speechkit.tts.v3.AudioChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.TextTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechkit.tts.v3.TextTemplate.repeatedFields_, null);
};
goog.inherits(proto.speechkit.tts.v3.TextTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.TextTemplate.displayName = 'proto.speechkit.tts.v3.TextTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.Hints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.speechkit.tts.v3.Hints.oneofGroups_);
};
goog.inherits(proto.speechkit.tts.v3.Hints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.Hints.displayName = 'proto.speechkit.tts.v3.Hints';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.speechkit.tts.v3.UtteranceSynthesisRequest.repeatedFields_, proto.speechkit.tts.v3.UtteranceSynthesisRequest.oneofGroups_);
};
goog.inherits(proto.speechkit.tts.v3.UtteranceSynthesisRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.speechkit.tts.v3.UtteranceSynthesisRequest.displayName = 'proto.speechkit.tts.v3.UtteranceSynthesisRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speechkit.tts.v3.AudioContent.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.speechkit.tts.v3.AudioContent.AudiosourceCase = {
  AUDIOSOURCE_NOT_SET: 0,
  CONTENT: 1
};

/**
 * @return {proto.speechkit.tts.v3.AudioContent.AudiosourceCase}
 */
proto.speechkit.tts.v3.AudioContent.prototype.getAudiosourceCase = function() {
  return /** @type {proto.speechkit.tts.v3.AudioContent.AudiosourceCase} */(jspb.Message.computeOneofCase(this, proto.speechkit.tts.v3.AudioContent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.AudioContent.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.AudioContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.AudioContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64(),
    audioSpec: (f = msg.getAudioSpec()) && proto.speechkit.tts.v3.AudioFormatOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.AudioContent}
 */
proto.speechkit.tts.v3.AudioContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.AudioContent;
  return proto.speechkit.tts.v3.AudioContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.AudioContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.AudioContent}
 */
proto.speechkit.tts.v3.AudioContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 2:
      var value = new proto.speechkit.tts.v3.AudioFormatOptions;
      reader.readMessage(value,proto.speechkit.tts.v3.AudioFormatOptions.deserializeBinaryFromReader);
      msg.setAudioSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.AudioContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.AudioContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.AudioContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAudioSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speechkit.tts.v3.AudioFormatOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.speechkit.tts.v3.AudioContent.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.speechkit.tts.v3.AudioContent.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.AudioContent.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.speechkit.tts.v3.AudioContent} returns this
 */
proto.speechkit.tts.v3.AudioContent.prototype.setContent = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.speechkit.tts.v3.AudioContent.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speechkit.tts.v3.AudioContent} returns this
 */
proto.speechkit.tts.v3.AudioContent.prototype.clearContent = function() {
  return jspb.Message.setOneofField(this, 1, proto.speechkit.tts.v3.AudioContent.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.AudioContent.prototype.hasContent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioFormatOptions audio_spec = 2;
 * @return {?proto.speechkit.tts.v3.AudioFormatOptions}
 */
proto.speechkit.tts.v3.AudioContent.prototype.getAudioSpec = function() {
  return /** @type{?proto.speechkit.tts.v3.AudioFormatOptions} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.AudioFormatOptions, 2));
};


/**
 * @param {?proto.speechkit.tts.v3.AudioFormatOptions|undefined} value
 * @return {!proto.speechkit.tts.v3.AudioContent} returns this
*/
proto.speechkit.tts.v3.AudioContent.prototype.setAudioSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.AudioContent} returns this
 */
proto.speechkit.tts.v3.AudioContent.prototype.clearAudioSpec = function() {
  return this.setAudioSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.AudioContent.prototype.hasAudioSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speechkit.tts.v3.AudioFormatOptions.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.speechkit.tts.v3.AudioFormatOptions.AudioformatCase = {
  AUDIOFORMAT_NOT_SET: 0,
  RAW_AUDIO: 1,
  CONTAINER_AUDIO: 2
};

/**
 * @return {proto.speechkit.tts.v3.AudioFormatOptions.AudioformatCase}
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.getAudioformatCase = function() {
  return /** @type {proto.speechkit.tts.v3.AudioFormatOptions.AudioformatCase} */(jspb.Message.computeOneofCase(this, proto.speechkit.tts.v3.AudioFormatOptions.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.AudioFormatOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.AudioFormatOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioFormatOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawAudio: (f = msg.getRawAudio()) && proto.speechkit.tts.v3.RawAudio.toObject(includeInstance, f),
    containerAudio: (f = msg.getContainerAudio()) && proto.speechkit.tts.v3.ContainerAudio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.AudioFormatOptions}
 */
proto.speechkit.tts.v3.AudioFormatOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.AudioFormatOptions;
  return proto.speechkit.tts.v3.AudioFormatOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.AudioFormatOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.AudioFormatOptions}
 */
proto.speechkit.tts.v3.AudioFormatOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechkit.tts.v3.RawAudio;
      reader.readMessage(value,proto.speechkit.tts.v3.RawAudio.deserializeBinaryFromReader);
      msg.setRawAudio(value);
      break;
    case 2:
      var value = new proto.speechkit.tts.v3.ContainerAudio;
      reader.readMessage(value,proto.speechkit.tts.v3.ContainerAudio.deserializeBinaryFromReader);
      msg.setContainerAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.AudioFormatOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.AudioFormatOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioFormatOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawAudio();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speechkit.tts.v3.RawAudio.serializeBinaryToWriter
    );
  }
  f = message.getContainerAudio();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speechkit.tts.v3.ContainerAudio.serializeBinaryToWriter
    );
  }
};


/**
 * optional RawAudio raw_audio = 1;
 * @return {?proto.speechkit.tts.v3.RawAudio}
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.getRawAudio = function() {
  return /** @type{?proto.speechkit.tts.v3.RawAudio} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.RawAudio, 1));
};


/**
 * @param {?proto.speechkit.tts.v3.RawAudio|undefined} value
 * @return {!proto.speechkit.tts.v3.AudioFormatOptions} returns this
*/
proto.speechkit.tts.v3.AudioFormatOptions.prototype.setRawAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.speechkit.tts.v3.AudioFormatOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.AudioFormatOptions} returns this
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.clearRawAudio = function() {
  return this.setRawAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.hasRawAudio = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ContainerAudio container_audio = 2;
 * @return {?proto.speechkit.tts.v3.ContainerAudio}
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.getContainerAudio = function() {
  return /** @type{?proto.speechkit.tts.v3.ContainerAudio} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.ContainerAudio, 2));
};


/**
 * @param {?proto.speechkit.tts.v3.ContainerAudio|undefined} value
 * @return {!proto.speechkit.tts.v3.AudioFormatOptions} returns this
*/
proto.speechkit.tts.v3.AudioFormatOptions.prototype.setContainerAudio = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.speechkit.tts.v3.AudioFormatOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.AudioFormatOptions} returns this
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.clearContainerAudio = function() {
  return this.setContainerAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.AudioFormatOptions.prototype.hasContainerAudio = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.RawAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.RawAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.RawAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.RawAudio.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioEncoding: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sampleRateHertz: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.RawAudio}
 */
proto.speechkit.tts.v3.RawAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.RawAudio;
  return proto.speechkit.tts.v3.RawAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.RawAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.RawAudio}
 */
proto.speechkit.tts.v3.RawAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechkit.tts.v3.RawAudio.AudioEncoding} */ (reader.readEnum());
      msg.setAudioEncoding(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSampleRateHertz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.RawAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.RawAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.RawAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.RawAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSampleRateHertz();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.speechkit.tts.v3.RawAudio.AudioEncoding = {
  AUDIO_ENCODING_UNSPECIFIED: 0,
  LINEAR16_PCM: 1
};

/**
 * optional AudioEncoding audio_encoding = 1;
 * @return {!proto.speechkit.tts.v3.RawAudio.AudioEncoding}
 */
proto.speechkit.tts.v3.RawAudio.prototype.getAudioEncoding = function() {
  return /** @type {!proto.speechkit.tts.v3.RawAudio.AudioEncoding} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechkit.tts.v3.RawAudio.AudioEncoding} value
 * @return {!proto.speechkit.tts.v3.RawAudio} returns this
 */
proto.speechkit.tts.v3.RawAudio.prototype.setAudioEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 sample_rate_hertz = 2;
 * @return {number}
 */
proto.speechkit.tts.v3.RawAudio.prototype.getSampleRateHertz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechkit.tts.v3.RawAudio} returns this
 */
proto.speechkit.tts.v3.RawAudio.prototype.setSampleRateHertz = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.ContainerAudio.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.ContainerAudio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.ContainerAudio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.ContainerAudio.toObject = function(includeInstance, msg) {
  var f, obj = {
    containerAudioType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.ContainerAudio}
 */
proto.speechkit.tts.v3.ContainerAudio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.ContainerAudio;
  return proto.speechkit.tts.v3.ContainerAudio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.ContainerAudio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.ContainerAudio}
 */
proto.speechkit.tts.v3.ContainerAudio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.speechkit.tts.v3.ContainerAudio.ContainerAudioType} */ (reader.readEnum());
      msg.setContainerAudioType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.ContainerAudio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.ContainerAudio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.ContainerAudio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.ContainerAudio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContainerAudioType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.speechkit.tts.v3.ContainerAudio.ContainerAudioType = {
  CONTAINER_AUDIO_TYPE_UNSPECIFIED: 0,
  WAV: 1,
  OGG_OPUS: 2
};

/**
 * optional ContainerAudioType container_audio_type = 1;
 * @return {!proto.speechkit.tts.v3.ContainerAudio.ContainerAudioType}
 */
proto.speechkit.tts.v3.ContainerAudio.prototype.getContainerAudioType = function() {
  return /** @type {!proto.speechkit.tts.v3.ContainerAudio.ContainerAudioType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.speechkit.tts.v3.ContainerAudio.ContainerAudioType} value
 * @return {!proto.speechkit.tts.v3.ContainerAudio} returns this
 */
proto.speechkit.tts.v3.ContainerAudio.prototype.setContainerAudioType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.TextVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.TextVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.TextVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.TextVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    variableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    variableValue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.TextVariable}
 */
proto.speechkit.tts.v3.TextVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.TextVariable;
  return proto.speechkit.tts.v3.TextVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.TextVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.TextVariable}
 */
proto.speechkit.tts.v3.TextVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariableName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariableValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.TextVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.TextVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.TextVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.TextVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVariableValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string variable_name = 1;
 * @return {string}
 */
proto.speechkit.tts.v3.TextVariable.prototype.getVariableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechkit.tts.v3.TextVariable} returns this
 */
proto.speechkit.tts.v3.TextVariable.prototype.setVariableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string variable_value = 2;
 * @return {string}
 */
proto.speechkit.tts.v3.TextVariable.prototype.getVariableValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechkit.tts.v3.TextVariable} returns this
 */
proto.speechkit.tts.v3.TextVariable.prototype.setVariableValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.AudioVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.AudioVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.AudioVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    variableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    variableStartMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    variableLengthMs: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.AudioVariable}
 */
proto.speechkit.tts.v3.AudioVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.AudioVariable;
  return proto.speechkit.tts.v3.AudioVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.AudioVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.AudioVariable}
 */
proto.speechkit.tts.v3.AudioVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariableName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVariableStartMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVariableLengthMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.AudioVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.AudioVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.AudioVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVariableStartMs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getVariableLengthMs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string variable_name = 1;
 * @return {string}
 */
proto.speechkit.tts.v3.AudioVariable.prototype.getVariableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechkit.tts.v3.AudioVariable} returns this
 */
proto.speechkit.tts.v3.AudioVariable.prototype.setVariableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 variable_start_ms = 2;
 * @return {number}
 */
proto.speechkit.tts.v3.AudioVariable.prototype.getVariableStartMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechkit.tts.v3.AudioVariable} returns this
 */
proto.speechkit.tts.v3.AudioVariable.prototype.setVariableStartMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 variable_length_ms = 3;
 * @return {number}
 */
proto.speechkit.tts.v3.AudioVariable.prototype.getVariableLengthMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.speechkit.tts.v3.AudioVariable} returns this
 */
proto.speechkit.tts.v3.AudioVariable.prototype.setVariableLengthMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.UtteranceSynthesisResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.UtteranceSynthesisResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioChunk: (f = msg.getAudioChunk()) && proto.speechkit.tts.v3.AudioChunk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisResponse}
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.UtteranceSynthesisResponse;
  return proto.speechkit.tts.v3.UtteranceSynthesisResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.UtteranceSynthesisResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisResponse}
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechkit.tts.v3.AudioChunk;
      reader.readMessage(value,proto.speechkit.tts.v3.AudioChunk.deserializeBinaryFromReader);
      msg.setAudioChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.UtteranceSynthesisResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.UtteranceSynthesisResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioChunk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speechkit.tts.v3.AudioChunk.serializeBinaryToWriter
    );
  }
};


/**
 * optional AudioChunk audio_chunk = 1;
 * @return {?proto.speechkit.tts.v3.AudioChunk}
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.prototype.getAudioChunk = function() {
  return /** @type{?proto.speechkit.tts.v3.AudioChunk} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.AudioChunk, 1));
};


/**
 * @param {?proto.speechkit.tts.v3.AudioChunk|undefined} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisResponse} returns this
*/
proto.speechkit.tts.v3.UtteranceSynthesisResponse.prototype.setAudioChunk = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisResponse} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.prototype.clearAudioChunk = function() {
  return this.setAudioChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.UtteranceSynthesisResponse.prototype.hasAudioChunk = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechkit.tts.v3.AudioTemplate.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.AudioTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.AudioTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    audio: (f = msg.getAudio()) && proto.speechkit.tts.v3.AudioContent.toObject(includeInstance, f),
    textTemplate: (f = msg.getTextTemplate()) && proto.speechkit.tts.v3.TextTemplate.toObject(includeInstance, f),
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.speechkit.tts.v3.AudioVariable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.AudioTemplate}
 */
proto.speechkit.tts.v3.AudioTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.AudioTemplate;
  return proto.speechkit.tts.v3.AudioTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.AudioTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.AudioTemplate}
 */
proto.speechkit.tts.v3.AudioTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.speechkit.tts.v3.AudioContent;
      reader.readMessage(value,proto.speechkit.tts.v3.AudioContent.deserializeBinaryFromReader);
      msg.setAudio(value);
      break;
    case 2:
      var value = new proto.speechkit.tts.v3.TextTemplate;
      reader.readMessage(value,proto.speechkit.tts.v3.TextTemplate.deserializeBinaryFromReader);
      msg.setTextTemplate(value);
      break;
    case 3:
      var value = new proto.speechkit.tts.v3.AudioVariable;
      reader.readMessage(value,proto.speechkit.tts.v3.AudioVariable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.AudioTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.AudioTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudio();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.speechkit.tts.v3.AudioContent.serializeBinaryToWriter
    );
  }
  f = message.getTextTemplate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speechkit.tts.v3.TextTemplate.serializeBinaryToWriter
    );
  }
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.speechkit.tts.v3.AudioVariable.serializeBinaryToWriter
    );
  }
};


/**
 * optional AudioContent audio = 1;
 * @return {?proto.speechkit.tts.v3.AudioContent}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.getAudio = function() {
  return /** @type{?proto.speechkit.tts.v3.AudioContent} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.AudioContent, 1));
};


/**
 * @param {?proto.speechkit.tts.v3.AudioContent|undefined} value
 * @return {!proto.speechkit.tts.v3.AudioTemplate} returns this
*/
proto.speechkit.tts.v3.AudioTemplate.prototype.setAudio = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.AudioTemplate} returns this
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.clearAudio = function() {
  return this.setAudio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TextTemplate text_template = 2;
 * @return {?proto.speechkit.tts.v3.TextTemplate}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.getTextTemplate = function() {
  return /** @type{?proto.speechkit.tts.v3.TextTemplate} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.TextTemplate, 2));
};


/**
 * @param {?proto.speechkit.tts.v3.TextTemplate|undefined} value
 * @return {!proto.speechkit.tts.v3.AudioTemplate} returns this
*/
proto.speechkit.tts.v3.AudioTemplate.prototype.setTextTemplate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.AudioTemplate} returns this
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.clearTextTemplate = function() {
  return this.setTextTemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.hasTextTemplate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated AudioVariable variables = 3;
 * @return {!Array<!proto.speechkit.tts.v3.AudioVariable>}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.speechkit.tts.v3.AudioVariable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechkit.tts.v3.AudioVariable, 3));
};


/**
 * @param {!Array<!proto.speechkit.tts.v3.AudioVariable>} value
 * @return {!proto.speechkit.tts.v3.AudioTemplate} returns this
*/
proto.speechkit.tts.v3.AudioTemplate.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.speechkit.tts.v3.AudioVariable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechkit.tts.v3.AudioVariable}
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.speechkit.tts.v3.AudioVariable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechkit.tts.v3.AudioTemplate} returns this
 */
proto.speechkit.tts.v3.AudioTemplate.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.AudioChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.AudioChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.AudioChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.AudioChunk}
 */
proto.speechkit.tts.v3.AudioChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.AudioChunk;
  return proto.speechkit.tts.v3.AudioChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.AudioChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.AudioChunk}
 */
proto.speechkit.tts.v3.AudioChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.AudioChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.AudioChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.AudioChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.AudioChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.speechkit.tts.v3.AudioChunk.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.speechkit.tts.v3.AudioChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.AudioChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.speechkit.tts.v3.AudioChunk} returns this
 */
proto.speechkit.tts.v3.AudioChunk.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechkit.tts.v3.TextTemplate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.TextTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.TextTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.TextTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.TextTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    textTemplate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.speechkit.tts.v3.TextVariable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.TextTemplate}
 */
proto.speechkit.tts.v3.TextTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.TextTemplate;
  return proto.speechkit.tts.v3.TextTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.TextTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.TextTemplate}
 */
proto.speechkit.tts.v3.TextTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextTemplate(value);
      break;
    case 2:
      var value = new proto.speechkit.tts.v3.TextVariable;
      reader.readMessage(value,proto.speechkit.tts.v3.TextVariable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.TextTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.TextTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.TextTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.TextTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextTemplate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.speechkit.tts.v3.TextVariable.serializeBinaryToWriter
    );
  }
};


/**
 * optional string text_template = 1;
 * @return {string}
 */
proto.speechkit.tts.v3.TextTemplate.prototype.getTextTemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechkit.tts.v3.TextTemplate} returns this
 */
proto.speechkit.tts.v3.TextTemplate.prototype.setTextTemplate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TextVariable variables = 2;
 * @return {!Array<!proto.speechkit.tts.v3.TextVariable>}
 */
proto.speechkit.tts.v3.TextTemplate.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.speechkit.tts.v3.TextVariable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechkit.tts.v3.TextVariable, 2));
};


/**
 * @param {!Array<!proto.speechkit.tts.v3.TextVariable>} value
 * @return {!proto.speechkit.tts.v3.TextTemplate} returns this
*/
proto.speechkit.tts.v3.TextTemplate.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.speechkit.tts.v3.TextVariable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechkit.tts.v3.TextVariable}
 */
proto.speechkit.tts.v3.TextTemplate.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.speechkit.tts.v3.TextVariable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechkit.tts.v3.TextTemplate} returns this
 */
proto.speechkit.tts.v3.TextTemplate.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speechkit.tts.v3.Hints.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.speechkit.tts.v3.Hints.HintCase = {
  HINT_NOT_SET: 0,
  VOICE: 1,
  AUDIO_TEMPLATE: 2,
  SPEED: 3,
  VOLUME: 4
};

/**
 * @return {proto.speechkit.tts.v3.Hints.HintCase}
 */
proto.speechkit.tts.v3.Hints.prototype.getHintCase = function() {
  return /** @type {proto.speechkit.tts.v3.Hints.HintCase} */(jspb.Message.computeOneofCase(this, proto.speechkit.tts.v3.Hints.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.Hints.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.Hints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.Hints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.Hints.toObject = function(includeInstance, msg) {
  var f, obj = {
    voice: jspb.Message.getFieldWithDefault(msg, 1, ""),
    audioTemplate: (f = msg.getAudioTemplate()) && proto.speechkit.tts.v3.AudioTemplate.toObject(includeInstance, f),
    speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.Hints}
 */
proto.speechkit.tts.v3.Hints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.Hints;
  return proto.speechkit.tts.v3.Hints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.Hints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.Hints}
 */
proto.speechkit.tts.v3.Hints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoice(value);
      break;
    case 2:
      var value = new proto.speechkit.tts.v3.AudioTemplate;
      reader.readMessage(value,proto.speechkit.tts.v3.AudioTemplate.deserializeBinaryFromReader);
      msg.setAudioTemplate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.Hints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.Hints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.Hints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.Hints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAudioTemplate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.speechkit.tts.v3.AudioTemplate.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string voice = 1;
 * @return {string}
 */
proto.speechkit.tts.v3.Hints.prototype.getVoice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechkit.tts.v3.Hints} returns this
 */
proto.speechkit.tts.v3.Hints.prototype.setVoice = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.speechkit.tts.v3.Hints.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speechkit.tts.v3.Hints} returns this
 */
proto.speechkit.tts.v3.Hints.prototype.clearVoice = function() {
  return jspb.Message.setOneofField(this, 1, proto.speechkit.tts.v3.Hints.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.Hints.prototype.hasVoice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AudioTemplate audio_template = 2;
 * @return {?proto.speechkit.tts.v3.AudioTemplate}
 */
proto.speechkit.tts.v3.Hints.prototype.getAudioTemplate = function() {
  return /** @type{?proto.speechkit.tts.v3.AudioTemplate} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.AudioTemplate, 2));
};


/**
 * @param {?proto.speechkit.tts.v3.AudioTemplate|undefined} value
 * @return {!proto.speechkit.tts.v3.Hints} returns this
*/
proto.speechkit.tts.v3.Hints.prototype.setAudioTemplate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.speechkit.tts.v3.Hints.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.Hints} returns this
 */
proto.speechkit.tts.v3.Hints.prototype.clearAudioTemplate = function() {
  return this.setAudioTemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.Hints.prototype.hasAudioTemplate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double speed = 3;
 * @return {number}
 */
proto.speechkit.tts.v3.Hints.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.speechkit.tts.v3.Hints} returns this
 */
proto.speechkit.tts.v3.Hints.prototype.setSpeed = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.speechkit.tts.v3.Hints.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speechkit.tts.v3.Hints} returns this
 */
proto.speechkit.tts.v3.Hints.prototype.clearSpeed = function() {
  return jspb.Message.setOneofField(this, 3, proto.speechkit.tts.v3.Hints.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.Hints.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double volume = 4;
 * @return {number}
 */
proto.speechkit.tts.v3.Hints.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.speechkit.tts.v3.Hints} returns this
 */
proto.speechkit.tts.v3.Hints.prototype.setVolume = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.speechkit.tts.v3.Hints.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speechkit.tts.v3.Hints} returns this
 */
proto.speechkit.tts.v3.Hints.prototype.clearVolume = function() {
  return jspb.Message.setOneofField(this, 4, proto.speechkit.tts.v3.Hints.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.Hints.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.UtteranceCase = {
  UTTERANCE_NOT_SET: 0,
  TEXT: 2,
  TEXT_TEMPLATE: 3
};

/**
 * @return {proto.speechkit.tts.v3.UtteranceSynthesisRequest.UtteranceCase}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getUtteranceCase = function() {
  return /** @type {proto.speechkit.tts.v3.UtteranceSynthesisRequest.UtteranceCase} */(jspb.Message.computeOneofCase(this, proto.speechkit.tts.v3.UtteranceSynthesisRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.speechkit.tts.v3.UtteranceSynthesisRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    model: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    textTemplate: (f = msg.getTextTemplate()) && proto.speechkit.tts.v3.TextTemplate.toObject(includeInstance, f),
    hintsList: jspb.Message.toObjectList(msg.getHintsList(),
    proto.speechkit.tts.v3.Hints.toObject, includeInstance),
    outputAudioSpec: (f = msg.getOutputAudioSpec()) && proto.speechkit.tts.v3.AudioFormatOptions.toObject(includeInstance, f),
    loudnessNormalizationType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    unsafeMode: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.speechkit.tts.v3.UtteranceSynthesisRequest;
  return proto.speechkit.tts.v3.UtteranceSynthesisRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = new proto.speechkit.tts.v3.TextTemplate;
      reader.readMessage(value,proto.speechkit.tts.v3.TextTemplate.deserializeBinaryFromReader);
      msg.setTextTemplate(value);
      break;
    case 4:
      var value = new proto.speechkit.tts.v3.Hints;
      reader.readMessage(value,proto.speechkit.tts.v3.Hints.deserializeBinaryFromReader);
      msg.addHints(value);
      break;
    case 5:
      var value = new proto.speechkit.tts.v3.AudioFormatOptions;
      reader.readMessage(value,proto.speechkit.tts.v3.AudioFormatOptions.deserializeBinaryFromReader);
      msg.setOutputAudioSpec(value);
      break;
    case 6:
      var value = /** @type {!proto.speechkit.tts.v3.UtteranceSynthesisRequest.LoudnessNormalizationType} */ (reader.readEnum());
      msg.setLoudnessNormalizationType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnsafeMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.speechkit.tts.v3.UtteranceSynthesisRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTextTemplate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.speechkit.tts.v3.TextTemplate.serializeBinaryToWriter
    );
  }
  f = message.getHintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.speechkit.tts.v3.Hints.serializeBinaryToWriter
    );
  }
  f = message.getOutputAudioSpec();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.speechkit.tts.v3.AudioFormatOptions.serializeBinaryToWriter
    );
  }
  f = message.getLoudnessNormalizationType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getUnsafeMode();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.LoudnessNormalizationType = {
  LOUDNESS_NORMALIZATION_TYPE_UNSPECIFIED: 0,
  MAX_PEAK: 1,
  LUFS: 2
};

/**
 * optional string model = 1;
 * @return {string}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.speechkit.tts.v3.UtteranceSynthesisRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 2, proto.speechkit.tts.v3.UtteranceSynthesisRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextTemplate text_template = 3;
 * @return {?proto.speechkit.tts.v3.TextTemplate}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getTextTemplate = function() {
  return /** @type{?proto.speechkit.tts.v3.TextTemplate} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.TextTemplate, 3));
};


/**
 * @param {?proto.speechkit.tts.v3.TextTemplate|undefined} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
*/
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.setTextTemplate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.speechkit.tts.v3.UtteranceSynthesisRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.clearTextTemplate = function() {
  return this.setTextTemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.hasTextTemplate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Hints hints = 4;
 * @return {!Array<!proto.speechkit.tts.v3.Hints>}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getHintsList = function() {
  return /** @type{!Array<!proto.speechkit.tts.v3.Hints>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.speechkit.tts.v3.Hints, 4));
};


/**
 * @param {!Array<!proto.speechkit.tts.v3.Hints>} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
*/
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.setHintsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.speechkit.tts.v3.Hints=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speechkit.tts.v3.Hints}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.addHints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.speechkit.tts.v3.Hints, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.clearHintsList = function() {
  return this.setHintsList([]);
};


/**
 * optional AudioFormatOptions output_audio_spec = 5;
 * @return {?proto.speechkit.tts.v3.AudioFormatOptions}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getOutputAudioSpec = function() {
  return /** @type{?proto.speechkit.tts.v3.AudioFormatOptions} */ (
    jspb.Message.getWrapperField(this, proto.speechkit.tts.v3.AudioFormatOptions, 5));
};


/**
 * @param {?proto.speechkit.tts.v3.AudioFormatOptions|undefined} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
*/
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.setOutputAudioSpec = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.clearOutputAudioSpec = function() {
  return this.setOutputAudioSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.hasOutputAudioSpec = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LoudnessNormalizationType loudness_normalization_type = 6;
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest.LoudnessNormalizationType}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getLoudnessNormalizationType = function() {
  return /** @type {!proto.speechkit.tts.v3.UtteranceSynthesisRequest.LoudnessNormalizationType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.speechkit.tts.v3.UtteranceSynthesisRequest.LoudnessNormalizationType} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.setLoudnessNormalizationType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool unsafe_mode = 7;
 * @return {boolean}
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.getUnsafeMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.speechkit.tts.v3.UtteranceSynthesisRequest} returns this
 */
proto.speechkit.tts.v3.UtteranceSynthesisRequest.prototype.setUnsafeMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


goog.object.extend(exports, proto.speechkit.tts.v3);
